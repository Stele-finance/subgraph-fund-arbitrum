type Deposit @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  investor: Bytes! # address
  token: Bytes! # address
  symbol: String!
  amount: BigDecimal! # formatted amount (not raw)
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DepositFee @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  manager: Bytes! # address
  token: Bytes! # address
  symbol: String!
  amount: BigDecimal! # formatted amount (not raw)
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Swap @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  investor: Bytes! # address
  tokenIn: Bytes! # address
  tokenOut: Bytes! # address
  tokenInSymbol: String!
  tokenOutSymbol: String!
  tokenInAmount: BigDecimal! # formatted amount (not raw)
  tokenOutAmount: BigDecimal! # formatted amount (not raw)
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  investor: Bytes! # address
  percentage: BigDecimal! # withdrawal percentage
  amountUSD: BigDecimal! # USD value of the withdrawal
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawFee @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  manager: Bytes! # address
  token: Bytes! # address
  symbol: String!
  amount: BigDecimal! # formatted amount (not raw)
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Create @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  manager: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type InfoCreated @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerChanged @entity(immutable: true) {
  id: Bytes!
  oldOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Join @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  investor: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FundShare @entity(immutable: false) {
  id: String! # fundId
  fundId: BigInt! # uint256
  totalShare: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type InvestorShare @entity(immutable: false) {
  id: String! # fundId-investor
  fundId: BigInt! # uint256
  investor: Bytes! # address
  share: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SettingCreated @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ManagerFeeChanged @entity(immutable: true) {
  id: Bytes!
  managerFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddToken @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveToken @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxSlippageChanged @entity(immutable: true) {
  id: Bytes!
  maxSlippage: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxTokensChanged @entity(immutable: true) {
  id: Bytes!
  maxTokens: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Cache entities for performance optimization
type TokenCache @entity(immutable: false) {
  id: Bytes! # tokenAddress
  tokenAddress: Bytes!
  symbol: String!
  decimals: BigInt!
  updatedTimestamp: BigInt!
}

type PriceCache @entity(immutable: false) {
  id: String! # tokenAddress-timestamp
  tokenAddress: Bytes!
  priceETH: BigDecimal!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type Bundle @entity(immutable: false) {
  id: String! # always "1"
  ethPriceUSD: BigDecimal!
  lastUpdateBlock: BigInt!
  lastUpdateTimestamp: BigInt!
}

type PoolInfo @entity(immutable: false) {
  id: String! # tokenA-tokenB-fee
  tokenA: Bytes!
  tokenB: Bytes!
  fee: Int!
  poolAddress: Bytes!
  token0: Bytes!
  token1: Bytes!
  liquidity: BigInt!
  liquidityUpdatedTimestamp: BigInt!
  sqrtPriceX96: BigInt!
  slot0UpdatedTimestamp: BigInt!
}

# Fund management entities
type Info @entity(immutable: false) {
  id: Bytes!
  fundCount: BigInt!
  investorCount: BigInt!
  totalAmountUSD: BigDecimal!
  owner: Bytes!
}

type Fund @entity(immutable: false) {
  id: String! # fundId
  fundId: String!
  createdAtTimestamp: BigInt!
  updatedAtTimestamp: BigInt!
  manager: Bytes!
  investorCount: BigInt!
  share: BigInt!
  amountUSD: BigDecimal!
  profitUSD: BigDecimal!
  profitRatio: BigDecimal!
  feeTokens: [Bytes!]!
  feeSymbols: [String!]!
  feeTokensAmount: [BigDecimal!]!
  tokens: [Bytes!]!
  tokensSymbols: [String!]!
  tokensDecimals: [BigInt!]!
  tokensAmount: [BigDecimal!]!
}

type Investor @entity(immutable: false) {
  id: String! # fundId-investor
  createdAtTimestamp: BigInt!
  updatedAtTimestamp: BigInt!
  fundId: String!
  investor: Bytes!
  isManager: Boolean!
  share: BigInt
  amountUSD: BigDecimal!
  profitUSD: BigDecimal!
  profitRatio: BigDecimal!
  tokens: [Bytes!]!
  tokensSymbols: [String!]!
  tokensDecimals: [BigInt!]!
  tokensAmount: [BigDecimal!]!
}

type Setting @entity(immutable: false) {
  id: Bytes!
  managerFee: BigInt!
  maxSlippage: BigInt!
  maxTokens: BigInt!
  owner: Bytes!
}

type InvestableToken @entity(immutable: false) {
  id: Bytes! # token address
  address: Bytes!
  decimals: BigInt!
  symbol: String!
  updatedTimestamp: BigInt!
  isInvestable: Boolean!
}

# Governance entities - simplified like challenge governance
enum ProposalStatus {
  Pending
  Active
  Canceled
  Defeated
  Succeeded
  Queued
  Expired
  Executed
}

type Proposal @entity(immutable: false) {
  id: Bytes!
  proposalId: BigInt!
  proposer: Bytes!
  targets: [Bytes!]!
  values: [BigInt!]!
  signatures: [String!]!
  calldatas: [Bytes!]!
  voteStart: BigInt!
  voteEnd: BigInt!
  description: String!
  status: ProposalStatus!
  forVotes: BigInt!
  againstVotes: BigInt!
  abstainVotes: BigInt!
  totalVotes: BigInt!
  executed: Boolean!
  canceled: Boolean!
  queued: Boolean!
  eta: BigInt
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Vote @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt!
  voter: Bytes!
  support: Int! # 0=Against, 1=For, 2=Abstain
  weight: BigInt!
  reason: String
  params: Bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Keep VotingPower as requested
type VotingPower @entity(immutable: false) {
  id: String! # voter-blockNumber
  voter: Bytes!
  blockNumber: BigInt!
  votingPower: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalExecuted @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalQueued @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt!
  eta: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalCanceled @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Token entities for voting power tracking
type DelegateChanged @entity(immutable: true) {
  id: Bytes! # tx hash + log index
  delegator: Bytes!
  fromDelegate: Bytes!
  toDelegate: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelegateVotesChanged @entity(immutable: true) {
  id: Bytes! # tx hash + log index
  delegate: Bytes!
  previousBalance: BigInt!
  newBalance: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenTransfer @entity(immutable: true) {
  id: Bytes! # tx hash + log index
  from: Bytes!
  to: Bytes!
  value: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Snapshot entities for historical tracking
type InfoSnapshot @entity(immutable: false) {
  id: ID!
  timestamp: BigInt!
  fundCount: BigInt!
  investorCount: BigInt!
  totalAmountUSD: BigDecimal!
}

type InfoWeeklySnapshot @entity(immutable: false) {
  id: ID!
  timestamp: BigInt!
  fundCount: BigInt!
  investorCount: BigInt!
  totalAmountUSD: BigDecimal!
}

type InfoMonthlySnapshot @entity(immutable: false) {
  id: ID!
  timestamp: BigInt!
  fundCount: BigInt!
  investorCount: BigInt!
  totalAmountUSD: BigDecimal!
}

type FundSnapshot @entity(immutable: false) {
  id: ID!
  timestamp: BigInt!
  fundId: String!
  manager: Bytes!
  investorCount: BigInt!
  share: BigInt!
  amountUSD: BigDecimal!
  profitUSD: BigDecimal!
  profitRatio: BigDecimal!
  tokens: [Bytes!]!
  tokensSymbols: [String!]!
  tokensDecimals: [BigInt!]!
  tokensAmount: [BigDecimal!]!
  tokensAmountUSD: [BigDecimal!]!
}

type FundWeeklySnapshot @entity(immutable: false) {
  id: ID!
  timestamp: BigInt!
  fundId: String!
  manager: Bytes!
  investorCount: BigInt!
  share: BigInt!
  amountUSD: BigDecimal!
  profitUSD: BigDecimal!
  profitRatio: BigDecimal!
  tokens: [Bytes!]!
  tokensSymbols: [String!]!
  tokensDecimals: [BigInt!]!
  tokensAmount: [BigDecimal!]!
  tokensAmountUSD: [BigDecimal!]!
}

type FundMonthlySnapshot @entity(immutable: false) {
  id: ID!
  timestamp: BigInt!
  fundId: String!
  manager: Bytes!
  investorCount: BigInt!
  share: BigInt!
  amountUSD: BigDecimal!
  profitUSD: BigDecimal!
  profitRatio: BigDecimal!
  tokens: [Bytes!]!
  tokensSymbols: [String!]!
  tokensDecimals: [BigInt!]!
  tokensAmount: [BigDecimal!]!
  tokensAmountUSD: [BigDecimal!]!
}

type InvestorSnapshot @entity(immutable: false) {
  id: ID!
  timestamp: BigInt!
  fundId: String!
  manager: Bytes!
  investor: Bytes!
  share: BigInt!
  amountUSD: BigDecimal!
  profitUSD: BigDecimal!
  profitRatio: BigDecimal!
  tokens: [Bytes!]!
  tokensSymbols: [String!]!
  tokensDecimals: [BigInt!]!
  tokensAmountUSD: [BigDecimal!]!
}

type InvestorWeeklySnapshot @entity(immutable: false) {
  id: ID!
  timestamp: BigInt!
  fundId: String!
  manager: Bytes!
  investor: Bytes!
  share: BigInt!
  amountUSD: BigDecimal!
  profitUSD: BigDecimal!
  profitRatio: BigDecimal!
  tokens: [Bytes!]!
  tokensSymbols: [String!]!
  tokensDecimals: [BigInt!]!
  tokensAmountUSD: [BigDecimal!]!
}

type InvestorMonthlySnapshot @entity(immutable: false) {
  id: ID!
  timestamp: BigInt!
  fundId: String!
  manager: Bytes!
  investor: Bytes!
  share: BigInt!
  amountUSD: BigDecimal!
  profitUSD: BigDecimal!
  profitRatio: BigDecimal!
  tokens: [Bytes!]!
  tokensSymbols: [String!]!
  tokensDecimals: [BigInt!]!
  tokensAmountUSD: [BigDecimal!]!
}
